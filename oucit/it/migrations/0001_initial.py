# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-14 14:27
from __future__ import unicode_literals

import DjangoUeditor.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import it.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('number_id', models.CharField(error_messages={'unique': '该学工号已经注册！请检查！'}, help_text='请输入正确的学工号用于系统登录', max_length=15, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='学工号')),
                ('name', models.CharField(max_length=50, verbose_name='姓名')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'ordering': ['number_id'],
            },
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=50, verbose_name='栏目二级分类名称')),
            ],
            options={
                'verbose_name': '栏目二级分类',
                'verbose_name_plural': '栏目二级分类',
            },
        ),
        migrations.CreateModel(
            name='ArticleColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=50, verbose_name='栏目名称')),
            ],
            options={
                'verbose_name': '文章栏目',
                'verbose_name_plural': '文章栏目',
            },
        ),
        migrations.CreateModel(
            name='BaseArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.CharField(max_length=50, verbose_name='标题')),
                ('subheading', models.CharField(blank=True, default='', max_length=50, verbose_name='副标题')),
                ('author', models.CharField(choices=[('0', '我自己'), ('1', '匿名'), ('2', '未知')], default='0', max_length=15, verbose_name='作者')),
                ('source', models.CharField(choices=[('0', '本站原创'), ('1', '转载'), ('2', '未知'), ('3', '来自网络')], default='0', max_length=15, verbose_name='来源')),
                ('open_jmp_url', models.BooleanField(default=False, verbose_name='启用转向链接')),
                ('jmp_url', models.URLField(blank=True, default='', verbose_name='转向链接')),
                ('content', DjangoUeditor.models.UEditorField(blank=True, default='', verbose_name='正文')),
                ('index_img', models.BooleanField(default=True, verbose_name='从本文获取首页图片')),
                ('index_img_url', models.CharField(blank=True, default='', max_length=200, verbose_name='首页图片地址')),
                ('article_top', models.BooleanField(default=False, verbose_name='置顶文章')),
                ('article_hot', models.BooleanField(default=False, verbose_name='热门文章')),
                ('c_time', models.DateField(auto_now_add=True, verbose_name='录入时间')),
            ],
            options={
                'verbose_name': '文章',
                'verbose_name_plural': '文章',
                'ordering': ['-c_time', 'article_top', 'article_hot'],
            },
        ),
        migrations.CreateModel(
            name='Carousel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pic', models.ImageField(upload_to='index-img', verbose_name='图片(规格: 1190*398)')),
                ('headline', models.CharField(blank=True, default='', max_length=80, verbose_name='标题')),
                ('display_level', models.IntegerField(default=1, verbose_name='显示顺序')),
            ],
            options={
                'verbose_name': '首页轮播图',
                'verbose_name_plural': '首页轮播图',
                'ordering': ['display_level'],
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_level', models.IntegerField(verbose_name='显示等级')),
                ('job_tile', models.CharField(blank=True, default='', max_length=100, verbose_name='职务')),
                ('job', models.CharField(blank=True, default='', max_length=100, verbose_name='职责')),
                ('phone', models.CharField(blank=True, default='', max_length=100, verbose_name='电话')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': '职责关系',
                'verbose_name_plural': '职责关系',
                'ordering': ['group_fk', 'display_level'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='组织名字')),
                ('type', models.CharField(choices=[('0', '组织'), ('1', '社团'), ('2', '实验室'), ('3', '其他')], default=0, max_length=10, verbose_name='组织类型')),
                ('pic', models.ImageField(blank=True, upload_to='org-img', verbose_name='组织图片')),
                ('link_url', models.URLField(blank=True, default='', verbose_name='组织网址')),
            ],
            options={
                'verbose_name': '组织',
                'verbose_name_plural': '组织',
            },
        ),
        migrations.CreateModel(
            name='HZBX',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.CharField(max_length=50, verbose_name='标题')),
                ('content', DjangoUeditor.models.UEditorField(blank=True, default='', verbose_name='正文')),
                ('c_time', models.DateTimeField(auto_now_add=True, verbose_name='录入时间')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发表人')),
            ],
            options={
                'verbose_name': '合作办学',
                'verbose_name_plural': '合作办学',
            },
        ),
        migrations.CreateModel(
            name='Introduce',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(choices=[('0', '学院'), ('1', '物理系'), ('2', '电子工程系'), ('3', '计算机科学与技术系'), ('4', '海洋技术系'), ('5', '信息工程系'), ('6', '物理学'), ('7', '光信息科学与技术'), ('8', '电子信息科学与技术'), ('9', '电子信息工程'), ('10', '通信工程'), ('11', '计算机科学与技术'), ('12', '海洋技术')], default=0, help_text='院系介绍选择结尾为系，专业介绍结尾无系', max_length=20, verbose_name='院系专业')),
                ('content', DjangoUeditor.models.UEditorField(blank=True, default='', verbose_name='正文')),
            ],
            options={
                'verbose_name': '院系、专业介绍',
                'verbose_name_plural': '院系、专业介绍',
                'ordering': ['department'],
            },
        ),
        migrations.CreateModel(
            name='IPRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_addr', models.GenericIPAddressField(verbose_name='IP地址')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='登录时间')),
                ('user_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='管理员')),
            ],
            options={
                'verbose_name': '登录记录',
                'verbose_name_plural': '登录记录',
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pic', models.ImageField(blank=True, upload_to='user-head', verbose_name='上传照片')),
                ('birthday', models.DateField(verbose_name='生日')),
                ('politics_status', models.CharField(blank=True, default='', max_length=20, verbose_name='政治面貌')),
                ('education', models.CharField(blank=True, default='', max_length=50, verbose_name='学历')),
                ('mobile_phone', models.CharField(blank=True, default='', max_length=15, verbose_name='移动电话')),
                ('office_phone', models.CharField(blank=True, default='', max_length=15, verbose_name='办公电话')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='Email')),
                ('workplace', models.CharField(blank=True, default='', max_length=50, verbose_name='办公室')),
                ('address', models.CharField(blank=True, default='', max_length=80, verbose_name='通信地址')),
                ('job_title', models.CharField(choices=[('0', '教授'), ('1', '副教授'), ('2', '高级工程师'), ('3', '高级实验师'), ('4', '讲师'), ('5', '助理工程师'), ('6', '助理实验师'), ('7', '其他')], default=0, max_length=10, verbose_name='职称')),
                ('job', models.CharField(choices=[('0', '院长'), ('1', '副院长'), ('2', '系主任'), ('3', '副系主任'), ('4', '其他')], default=0, max_length=10, verbose_name='职务')),
                ('tutor', models.CharField(choices=[('0', '博士生导师'), ('1', '硕士生导师'), ('2', '其他')], default=0, max_length=10, verbose_name='导师')),
                ('department', models.CharField(choices=[('0', '物理系'), ('1', '电子工程系'), ('2', '计算机科学与技术系'), ('3', '海洋技术系'), ('4', '信息工程中心'), ('5', '行政人员')], default=0, max_length=15, verbose_name='单位')),
                ('course', it.models.NormalTextField(blank=True, default='', verbose_name='教授课程')),
                ('experience', it.models.NormalTextField(blank=True, default='', verbose_name='教育及工作经历')),
                ('research_direction', it.models.NormalTextField(blank=True, default='', verbose_name='研究方向')),
                ('research_project', it.models.NormalTextField(blank=True, default='', verbose_name='科研项目')),
                ('achievements', it.models.NormalTextField(blank=True, default='', verbose_name='学术成果')),
                ('paper', it.models.NormalTextField(blank=True, default='', verbose_name='论文专利')),
                ('enrolment', it.models.NormalTextField(blank=True, default='', verbose_name='研究生招生条件')),
                ('remark', it.models.NormalTextField(blank=True, default='', verbose_name='备注')),
                ('user_fk', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户详细信息',
                'verbose_name_plural': '用户详细信息',
            },
        ),
        migrations.CreateModel(
            name='Teach_Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=50, verbose_name='课程名称')),
                ('department', models.CharField(choices=[('0', '物理系'), ('1', '电子工程系'), ('2', '计算机科学与技术系'), ('3', '海洋技术系')], default=0, max_length=20, verbose_name='开课院系')),
                ('major', models.CharField(choices=[('0', '物理学'), ('1', '光信息科学与技术'), ('2', '电子信息科学与技术'), ('3', '电子信息工程'), ('4', '通信工程'), ('5', '计算机科学与技术'), ('6', '海洋技术')], default=0, max_length=20, verbose_name='所属专业')),
                ('course_type', models.CharField(choices=[('0', '无实验理论课或纯试验课程'), ('1', '含实验理论课'), ('2', '课程设计(或以周为教学单位的试验课)')], default=0, max_length=30, verbose_name='课程类型')),
                ('course_id', models.CharField(max_length=30, verbose_name='课程编号')),
                ('course_name_english', models.CharField(max_length=100, verbose_name='课程英文名称')),
                ('course_hours', models.SmallIntegerField(verbose_name='课程总学时')),
                ('course_credit', models.FloatField(verbose_name='课程总学分')),
                ('experiment_hours', models.SmallIntegerField(verbose_name='含实验或实践学时')),
                ('experiment_credit', models.FloatField(verbose_name='含实验或实践学分')),
                ('recommend_book', models.CharField(blank=True, default='', max_length=200, verbose_name='推荐使用教材')),
                ('recommend_book_author', models.CharField(blank=True, default='', max_length=200, verbose_name='推荐使用教材编者')),
                ('recommend_book_publisher', models.CharField(blank=True, default='', max_length=200, verbose_name='推荐使用教材出版社')),
                ('recommend_book_time_version', models.CharField(blank=True, default='', max_length=200, verbose_name='推荐使用教材出版时间及版次')),
                ('course_object', it.models.NormalTextField(blank=True, default='', verbose_name='课程教学目标与基本要求')),
                ('quiz_type', models.CharField(max_length=20, verbose_name='考试形式')),
                ('referance_book', it.models.NormalTextField(blank=True, default='', verbose_name='学习参考书')),
                ('additional_file', models.FileField(blank=True, upload_to='course-file', verbose_name='上传更多信息')),
            ],
            options={
                'verbose_name': '课程列表',
                'verbose_name_plural': '课程列表',
            },
        ),
        migrations.CreateModel(
            name='Teach_Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major', models.CharField(choices=[('0', '物理学'), ('1', '光信息科学与技术'), ('2', '电子信息科学与技术'), ('3', '电子信息工程'), ('4', '电子信息工程中法卓越班'), ('5', '通信工程'), ('6', '计算机科学与技术'), ('7', '海洋技术')], default='0', max_length=20, verbose_name='专业')),
                ('u_time', models.DateField(auto_now=True, verbose_name='上传时间')),
                ('file', models.FileField(blank=True, upload_to='teach-plan', verbose_name='替换上传')),
            ],
            options={
                'verbose_name': '培养计划',
                'verbose_name_plural': '培养计划',
                'ordering': ['major'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('basearticle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='it.BaseArticle')),
                ('is_official', models.BooleanField(default=True, verbose_name='学院官方')),
            ],
            options={
                'verbose_name': '学院新闻',
                'verbose_name_plural': '学院新闻',
            },
            bases=('it.basearticle',),
        ),
        migrations.CreateModel(
            name='XSBG',
            fields=[
                ('basearticle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='it.BaseArticle')),
                ('meeting_place', models.CharField(max_length=100, verbose_name='举办地点')),
                ('meeting_time', models.DateTimeField(verbose_name='举办时间')),
            ],
            options={
                'verbose_name': '学术报告',
                'verbose_name_plural': '学术报告',
            },
            bases=('it.basearticle',),
        ),
        migrations.AddField(
            model_name='connection',
            name='group_fk',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='it.Group', verbose_name='组织'),
        ),
        migrations.AddField(
            model_name='connection',
            name='users_fk',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='组员'),
        ),
        migrations.AddField(
            model_name='basearticle',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='it.ArticleCategory', verbose_name='栏目分类'),
        ),
        migrations.AddField(
            model_name='basearticle',
            name='column',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='it.ArticleColumn', verbose_name='文章发表栏目'),
        ),
        migrations.AddField(
            model_name='basearticle',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='发表人'),
        ),
        migrations.AddField(
            model_name='articlecategory',
            name='belong_column',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='it.ArticleColumn'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='connection',
            unique_together=set([('group_fk', 'users_fk')]),
        ),
    ]
